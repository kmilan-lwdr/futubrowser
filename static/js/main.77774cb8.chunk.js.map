{"version":3,"sources":["Components/PaginationBar.js","Components/InfoOverlay.js","Components/ThumbnailImage.js","Components/GalleryContainer.js","Components/BackButton.js","Components/ViewerContainer.js","App.js","serviceWorker.js","index.js"],"names":["NEIGHBOURS","window","innerWidth","PaginationBar","props","generateButtonArray","bind","currentPage","totalPages","buttons","push","start","Math","max","end","min","visiblePages","concat","from","to","step","i","range","this","pages","query","_page","className","map","page","index","pageNo","key","path","queryString","stringify","Component","InfoOverlay","text","iconClass","ThumbnailImage","mouseOverEvent","state","showTitleCard","setState","id","onMouseEnter","onMouseLeave","src","url","width","height","alt","placeholderColor","style","display","title","QUERYPARAMS","_","require","GalleryContainer","useState","thumbnails","totalCount","thumbnailData","setThumbnailData","_limit","albumId","undefined","queryData","setQueryData","loading","setLoadingState","useEffect","request","mode","headers","withCredentials","credentials","a","queryParams","parse","location","search","pick","Number","limit","queryStr","skipEmptyString","skipNull","axios","get","then","response","data","catch","error","console","log","getThumbnails","length","value","thumbnailUrl","ceil","BackButton","onClick","history","goBack","withRouter","ViewerContainer","image","album","imageData","setImageData","match","params","albumResponse","getImageData","App","basename","component","exact","render","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.77774cb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport queryString from 'query-string';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NEIGHBOURS = window.innerWidth <= 760 ? 1 : 2;\r\nconst START = '|<';\r\nconst PREVIOUS = '<';\r\nconst NEXT = '>';\r\nconst END = '>|';\r\nconst BREAK = '...';\r\n\r\nclass PaginationBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.generateButtonArray = this.generateButtonArray.bind(this);\r\n    }   \r\n\r\n    generateButtonArray(currentPage, totalPages) {\r\n\r\n        const range = (from, to, step = 1) => {\r\n            let i = from;\r\n            const range = [];\r\n          \r\n            while (i <= to) {\r\n              range.push(i);\r\n              i += step;\r\n            }\r\n          \r\n            return range;\r\n        }\r\n\r\n        let buttons = [];\r\n        \r\n        // If current page is not the first, add \"start\" and \"previous\" buttons before the numbered buttons\r\n        if (currentPage > 1 ){\r\n            buttons.push(START);\r\n            buttons.push(PREVIOUS);\r\n        }\r\n\r\n        // Visible page numbers\r\n        let start = Math.max(1, currentPage - NEIGHBOURS);\r\n        let end = Math.min(totalPages, currentPage + NEIGHBOURS);\r\n        let visiblePages = 1 + 2 * NEIGHBOURS;\r\n\r\n        // Add ... when first page number not visible\r\n        if(start > 1)\r\n        {\r\n            buttons.push(BREAK);\r\n        }\r\n\r\n        // Always show max visible page numbers if totalPages exceeds it\r\n        if(end < visiblePages && totalPages >= visiblePages)\r\n        {\r\n            end = Math.min(visiblePages, currentPage + 1 + NEIGHBOURS * 2);\r\n        }\r\n        if(start > totalPages  - NEIGHBOURS * 2)\r\n        {\r\n            start = Math.max(1, totalPages  - NEIGHBOURS * 2)\r\n        }\r\n\r\n        buttons = buttons.concat(range(start, end));\r\n\r\n        // Add ... when last page number not visible\r\n        if(end < totalPages)\r\n        {\r\n            buttons.push(BREAK);\r\n        }\r\n\r\n        // If current page is not the last, add \"end\" and \"next\" -buttons after the numbered buttons\r\n        if (currentPage < totalPages){\r\n            buttons.push(NEXT);\r\n            buttons.push(END);\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.props.totalPages === 1) return null;\r\n        const pages = this.generateButtonArray(this.props.query._page, this.props.totalPages);\r\n\r\n        return (\r\n        \r\n        <div className=\"row centered paginationBar\">\r\n            {\r\n                pages.map((page, index) => {\r\n                    let pageNo;\r\n                    \r\n                    if (page === START) {\r\n                        pageNo = 1;\r\n                    }\r\n                    else if (page === PREVIOUS) {\r\n                        pageNo = this.props.query._page - 1;\r\n                    }\r\n                    else if (page === NEXT) {\r\n                        pageNo = this.props.query._page + 1;\r\n                    }\r\n                    else if (page === END) {\r\n                        pageNo = this.props.totalPages;\r\n                    }\r\n                    else if (page === BREAK) {\r\n                        return (\r\n                            <span key={index} className=\"break\">{page}</span>\r\n                        );\r\n                    }\r\n                    else {\r\n                        pageNo = page;\r\n                    }\r\n                    \r\n                    return (\r\n                        <Link \r\n                            to={this.props.path + \"?\" + queryString.stringify({...this.props.query, _page: pageNo})} \r\n                            key={index} \r\n                            className={`button ${this.props.query._page === pageNo ? 'active' : ''}`} >\r\n                            {page}\r\n                        </Link>\r\n                    );\r\n                })\r\n            }\r\n\r\n        </div>\r\n        \r\n        );\r\n\r\n  }\r\n}\r\n\r\nPaginationBar.propTypes = {\r\n    query: PropTypes.object,\r\n    totalPages: PropTypes.number,\r\n    path: PropTypes.string\r\n};\r\n\r\nexport default PaginationBar;","import React, { Component} from 'react';\r\n\r\nclass InfoOverlay extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"overlay\">\r\n                <div className=\"text\">\r\n                    {this.props.text}\r\n                    <div className={this.props.iconClass}/>\r\n                </div>                              \r\n            </div>\r\n        );\r\n\r\n  }\r\n}\r\n\r\nexport default InfoOverlay;","import React, { Component} from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport Image from 'react-graceful-image';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ThumbnailImage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mouseOverEvent = this.mouseOverEvent.bind(this);\r\n        this.state = {\r\n            showTitleCard: false,\r\n        };\r\n    }\r\n\r\n    mouseOverEvent() {\r\n      this.setState({showTitleCard: !this.state.showTitleCard});\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Link to={\"/view/\"+this.props.id}   onMouseEnter={this.mouseOverEvent} onMouseLeave={this.mouseOverEvent}>\r\n                <Image className=\"thumbnail\" \r\n                    src={this.props.url} \r\n                    width='150' height='150' \r\n                    alt={this.props.alt}\r\n                    placeholderColor='#393d3a'/>\r\n                                  \r\n                    <div className=\"titleCard\" style={{display: this.state.showTitleCard ? 'block' : 'none'}}>\r\n                        {this.props.title}\r\n                    </div>\r\n                                                   \r\n            </Link>\r\n        );\r\n\r\n  }\r\n}\r\n\r\nThumbnailImage.propTypes = {\r\n    url: PropTypes.string,\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default ThumbnailImage;","import React, { useState, useEffect } from 'react'\r\nimport PaginationBar from './PaginationBar'\r\nimport InfoOverlay from './InfoOverlay'\r\nimport ThumbnailImage from './ThumbnailImage'\r\nimport queryString from 'query-string';\r\nimport axios from 'axios'\r\n\r\n// Default fallback limit\r\nconst LIMIT = 40;\r\n\r\n// Accepted query params\r\nconst QUERYPARAMS = [\"_page\", \"_limit\", \"albumId\"];\r\n\r\nvar _ = require('lodash');\r\n\r\nexport default function GalleryContainer(props) {\r\n\r\n    // Setting initial states\r\n    const loadingState = {\r\n        loading: true,\r\n    }\r\n\r\n    const [thumbnailData, setThumbnailData] = useState({\r\n        thumbnails: [],\r\n        totalCount: 1\r\n    });\r\n\r\n    const [queryData, setQueryData] = useState( {       \r\n        _page: 1,\r\n        _limit: LIMIT,\r\n        albumId: undefined\r\n          \r\n    });\r\n\r\n    const [loading, setLoadingState] = useState(loadingState);   \r\n\r\n    \r\n\r\n    // Fetch thumbnails when search parameters change\r\n    useEffect(() => {\r\n\r\n        const request = {\r\n            mode: 'no-cors',\r\n            headers: {\r\n              'Access-Control-Allow-Origin': '*',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            withCredentials: true,\r\n            credentials: 'same-origin',\r\n        }\r\n        \r\n        const getThumbnails = async () => {   \r\n            setLoadingState(true);\r\n\r\n            let queryParams = queryString.parse(props.location.search);\r\n            queryParams = _.pick(queryParams, QUERYPARAMS);\r\n\r\n            // Ensure valid values\r\n            let page = Number(queryParams._page);\r\n            let limit = Number(queryParams._limit);\r\n            queryParams._page = page ? page : 1;\r\n            queryParams._limit = limit ? limit : LIMIT;\r\n            queryParams.albumId = queryParams.albumId ?? undefined;\r\n\r\n            let queryStr = \"?\" + queryString.stringify(queryParams, {skipEmptyString: true, skipNull: true});     \r\n            \r\n            // Should move URLs to external config\r\n            await axios\r\n            .get(`https://jsonplaceholder.typicode.com/photos${queryStr !== \"?\" ? queryStr : \"\"}`, request)\r\n            .then(response => {\r\n                setThumbnailData({\r\n                    thumbnails: response.data,\r\n                    totalCount: response.headers[\"x-total-count\"]\r\n                });\r\n                setQueryData(queryParams);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState(false);\r\n            });\r\n        }\r\n\r\n        getThumbnails();\r\n\r\n    }, [props.location.search]) \r\n\r\n    return  (\r\n        <div className=\"container\">\r\n            {\r\n                loading ? (\r\n                    <InfoOverlay text=\"Please wait...\" iconClass=\"loadingSpinner\"/>\r\n                ) : (\r\n                    thumbnailData.thumbnails.length > 0 ? (\r\n                        <div>\r\n                            <div className=\"row galleryGrid\">\r\n                                {\r\n                                    thumbnailData.thumbnails.map((value, index) => \r\n                                        <ThumbnailImage\r\n                                            id={value.id}\r\n                                            url={value.thumbnailUrl}\r\n                                            alt={value.id}\r\n                                            title={value.title}\r\n                                            key={index}\r\n                                        />)\r\n                                }                          \r\n                            </div>\r\n                            \r\n                            <PaginationBar \r\n                                query={queryData}\r\n                                totalPages={Math.ceil(thumbnailData.totalCount / queryData._limit)}\r\n                                path='/gallery'\r\n                            />\r\n                            \r\n                        </div>\r\n                    ) : (\r\n                        <InfoOverlay text=\"Unable to fetch data\" iconClass=\"failureIcon\"/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n            \r\n    )\r\n}","import React, { Component} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass BackButton extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"button\" onClick={this.props.history.goBack}>\r\n                Back to gallery       \r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default withRouter(BackButton);","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport InfoOverlay from './InfoOverlay'\r\nimport Image from 'react-graceful-image'\r\nimport BackButton from './BackButton'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction ViewerContainer(props) {\r\n\r\n    // Set initial states\r\n    const state = {\r\n        loading: true\r\n    }\r\n\r\n    const [imageData, setImageData] = useState({\r\n        image: undefined,\r\n        album: undefined\r\n    });\r\n\r\n    const [loading, setLoadingState] = useState(state);\r\n\r\n    // Should move URLs to external config\r\n    const photoBaseUrl = \"https://jsonplaceholder.typicode.com/photos/\";\r\n    const albumBaseUrl = \"https://jsonplaceholder.typicode.com/albums/\";\r\n\r\n    useEffect(() => {\r\n\r\n        const request = {\r\n            mode: 'no-cors',\r\n            headers: {\r\n              'Access-Control-Allow-Origin': '*',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            withCredentials: true,\r\n            credentials: 'same-origin',\r\n        }\r\n\r\n        const getImageData = async () => {  \r\n            await axios\r\n            .get(`${photoBaseUrl}${props.match.params.id}`, request)\r\n            .then(async response => {\r\n                await axios\r\n                .get(`${albumBaseUrl}${response.data.albumId}`, request)\r\n                .then(albumResponse => {\r\n                    setImageData({\r\n                        image: response.data,\r\n                        album: albumResponse.data\r\n                    })\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState(false);              \r\n            });\r\n\r\n        }\r\n\r\n        getImageData();\r\n    }, [props.match.params.id]) \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                loading ? (\r\n                    <InfoOverlay text=\"Please wait...\" iconClass=\"loadingSpinner\"/>\r\n                ) : (\r\n                    imageData.image.id ?  (\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <Image className=\"imageView\"\r\n                                src={imageData.image.url} \r\n                                width='600' height='600' \r\n                                alt={imageData.image.id}\r\n                                placeholderColor='#393d3a'/>    \r\n                            \r\n                        </div>\r\n                        <div className=\"row description\">\r\n                            <div className=\"descriptionRow\">\r\n                                <div className=\"descriptionKey\">Title</div>\r\n                                <div className=\"descriptionValue\"> \r\n                                    {imageData.image.title}\r\n                                </div>\r\n                                </div>\r\n                            <div className=\"descriptionRow\">\r\n                                <div className=\"descriptionKey\">Album</div>\r\n                                <Link to={\"/gallery?albumId=\"+imageData.album.id} className=\"descriptionValue link\"> \r\n                                    {imageData.album.title}\r\n                                </Link>\r\n                            </div>  \r\n                            <div className=\"descriptionRow\">\r\n                                <BackButton/>\r\n                            </div>           \r\n                            \r\n                        </div>\r\n                    </div>\r\n                    ) : (\r\n                        <InfoOverlay text=\"Unable to fetch data\" iconClass=\"failureIcon\"/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default ViewerContainer","import React from 'react';\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom'\nimport GalleryContainer from './Components/GalleryContainer';\nimport ViewerContainer from './Components/ViewerContainer';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Link to='/' className=\"AppHeader\">\n          futuBrowser\n        </Link>\n      \n        <Switch>\n          <Route path=\"/gallery\" component={GalleryContainer} />\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/gallery\" />)} />           \n          <Route path=\"/view/:id\" component={ViewerContainer}/>      \n          <Route path=\"*\" render={() => (<Redirect to=\"/gallery\" />)} />\n        </Switch>\n      </HashRouter>\n      \n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/Styles.scss';\nimport App from './App';\nimport { BrowserRouter as Router}  from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}