{"version":3,"sources":["Components/PaginationBar.js","Components/LoadingOverlay.js","Components/FailureOverlay.js","Components/ThumbnailImage.js","Components/GalleryContainer.js","Components/ViewerContainer.js","App.js","serviceWorker.js","index.js"],"names":["PaginationBar","props","changePage","bind","generateButtonArray","page","this","currentPage","setState","state","buttons","push","start","Math","max","end","min","totalPages","NEIGHBOURS","concat","from","to","step","i","range","pages","className","map","index","pageNo","key","url","Component","LoadingOverlay","FailureOverlay","ThumbnailImage","mouseOverEvent","showTitleCard","id","onMouseEnter","onMouseLeave","src","width","height","alt","placeholderColor","style","display","title","GalleryContainer","useState","thumbnails","totalCount","limit","thumbnailData","setThumbnailData","pageData","setPageData","loading","setLoadingState","useEffect","a","Number","match","params","axios","get","mode","headers","withCredentials","credentials","then","response","data","catch","error","console","log","getThumbnails","length","value","thumbnailUrl","ceil","ViewerContainer","image","undefined","setImage","getImageData","albumId","App","basename","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.111e41f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NEIGHBOURS = 2;\r\nconst START = '|<';\r\nconst PREVIOUS = '<';\r\nconst NEXT = '>';\r\nconst END = '>|';\r\nconst BREAK = '...';\r\n\r\n\r\n\r\nclass PaginationBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changePage = this.changePage.bind(this);\r\n        this.generateButtonArray = this.generateButtonArray.bind(this);\r\n      }\r\n    \r\n    changePage (page)  {\r\n        this.props.changePage({currentPage: page});\r\n        this.setState(this.state);\r\n    }\r\n\r\n    generateButtonArray() {\r\n\r\n        const range = (from, to, step = 1) => {\r\n            let i = from;\r\n            const range = [];\r\n          \r\n            while (i <= to) {\r\n              range.push(i);\r\n              i += step;\r\n            }\r\n          \r\n            return range;\r\n        }\r\n\r\n        let buttons = [];\r\n        \r\n        // If current page is not the first, add \"start\" and \"previous\" buttons before the numbered buttons\r\n        if (this.props.currentPage > 0 ){\r\n            buttons.push(START);\r\n            buttons.push(PREVIOUS);\r\n        }\r\n\r\n        // Visible page numbers\r\n        let start = Math.max(1, this.props.currentPage - NEIGHBOURS);\r\n        let end = Math.min(this.props.totalPages, this.props.currentPage + NEIGHBOURS);\r\n        let visiblePages = 1 + 2 * NEIGHBOURS;\r\n\r\n        // Add ... when first page number not visible\r\n        if(start > 1)\r\n        {\r\n            buttons.push(BREAK);\r\n        }\r\n\r\n        // Always show max visible page numbers if totalPages exceeds it\r\n        if(end < visiblePages && this.props.totalPages >= visiblePages)\r\n        {\r\n            end = Math.min(visiblePages, this.props.currentPage + 1 + NEIGHBOURS * 2);\r\n        }\r\n        if(start > this.props.totalPages  - NEIGHBOURS * 2)\r\n        {\r\n            start = Math.max(1, this.props.totalPages  - NEIGHBOURS * 2)\r\n        }\r\n\r\n        buttons = buttons.concat(range(start, end));\r\n\r\n        // Add ... when last page number not visible\r\n        if(end < this.props.totalPages)\r\n        {\r\n            buttons.push(BREAK);\r\n        }\r\n\r\n        // If current page is not the last, add \"end\" and \"next\" -buttons after the numbered buttons\r\n        if (this.props.currentPage < this.props.totalPages){\r\n            buttons.push(NEXT);\r\n            buttons.push(END);\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.totalPages === 1) return null;\r\n\r\n        const pages = this.generateButtonArray();\r\n\r\n        return (\r\n        \r\n        <div className=\"row centered paginationBar\">\r\n            {\r\n                pages.map((page, index) => {\r\n                    let pageNo;\r\n                    if (page === START) {\r\n                        pageNo = 1;\r\n                    }\r\n                    else if (page === PREVIOUS) {\r\n                        pageNo = this.props.currentPage - 1;\r\n                    }\r\n                    else if (page === NEXT) {\r\n                        pageNo = this.props.currentPage + 1;\r\n                    }\r\n                    else if (page === END) {\r\n                        pageNo = this.props.totalPages;\r\n                    }\r\n                    else if (page === BREAK) {\r\n                        return (\r\n                            <span key={index} className=\"break\">{page}</span>\r\n                        );\r\n                    }\r\n                    else {\r\n                        pageNo = page;\r\n                    }\r\n                    return (\r\n                        <Link \r\n                            to={this.props.url+pageNo} \r\n                            key={index} \r\n                            className={`button ${this.props.currentPage === page ? 'active' : ''}`} >\r\n                            {page}\r\n                        </Link>\r\n                    );\r\n                })\r\n            }\r\n\r\n        </div>\r\n        \r\n        );\r\n\r\n  }\r\n}\r\n\r\n\r\nPaginationBar.propTypes = {\r\n    currentPage: PropTypes.number,\r\n    totalPages: PropTypes.number,\r\n    url: PropTypes.string\r\n};\r\n\r\nexport default PaginationBar;","import React, { Component} from 'react';\r\n\r\nclass LoadingOverlay extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"overlay\">\r\n                <div className=\"text\">\r\n                    Please wait...\r\n                    <div className=\"loadingSpinner\"/>\r\n                </div>                              \r\n            </div>\r\n        );\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default LoadingOverlay;","import React, { Component} from 'react';\r\n\r\nclass FailureOverlay extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"overlay\">\r\n                <div className=\"text\">\r\n                    Unable to fetch data\r\n                    <div className=\"failureIcon\"/>\r\n                </div>         \r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\n\r\nexport default FailureOverlay;","import React, { Component} from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport Image from 'react-graceful-image';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ThumbnailImage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mouseOverEvent = this.mouseOverEvent.bind(this);\r\n        this.state = {\r\n            showTitleCard: false,\r\n        };\r\n    }\r\n\r\n    mouseOverEvent() {\r\n      this.setState({showTitleCard: !this.state.showTitleCard});\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Link to={\"/view/\"+this.props.id} onMouseEnter={this.mouseOverEvent} onMouseLeave={this.mouseOverEvent}>\r\n                <Image className=\"thumbnail\" \r\n                    src={this.props.url} \r\n                    width='150' height='150' \r\n                    alt={this.props.alt}\r\n                    placeholderColor='#393d3a'/>\r\n                \r\n                    \r\n                    <div className=\"titleCard\" style={{display: this.state.showTitleCard ? 'block' : 'none'}}>\r\n                        {this.props.title}\r\n                    </div>\r\n                                                   \r\n            </Link>\r\n        );\r\n\r\n  }\r\n}\r\n\r\nThumbnailImage.propTypes = {\r\n    //id: PropTypes.string,\r\n    //alt: PropTypes.string,\r\n    url: PropTypes.string,\r\n    title: PropTypes.string,\r\n    //key: PropTypes.string\r\n};\r\n\r\nexport default ThumbnailImage;","import React, { useState, useEffect } from 'react'\r\nimport PaginationBar from './PaginationBar'\r\nimport LoadingOverlay from './LoadingOverlay'\r\nimport FailureOverlay from './FailureOverlay'\r\nimport ThumbnailImage from './ThumbnailImage'\r\nimport axios from 'axios'\r\n\r\nconst LIMIT = 30;\r\n\r\nexport default function GalleryContainer(props) {\r\n    // Setting initial state\r\n    const loadingState = {\r\n        loading: true,\r\n    }\r\n\r\n    const [thumbnailData, setThumbnailData] = useState({\r\n        thumbnails: [],\r\n        totalCount: 1,\r\n        limit: LIMIT\r\n    });\r\n\r\n    const [pageData, setPageData] =useState( {\r\n        currentPage: 1\r\n    });\r\n\r\n    const [loading, setLoadingState] = useState(loadingState);   \r\n\r\n    // Fetch thumbnails when currentPage changes\r\n    useEffect(() => {\r\n\r\n        const getThumbnails = async () => {   \r\n            setLoadingState(true);\r\n            let page = Number(props.match.params.page);\r\n            setPageData({currentPage: page ? page : 1})\r\n            await axios\r\n            .get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=${LIMIT}`,\r\n            {\r\n                mode: 'no-cors',\r\n                headers: {\r\n                  'Access-Control-Allow-Origin': '*',\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n                credentials: 'same-origin',\r\n              })\r\n            .then(response => {\r\n                setThumbnailData({\r\n                    thumbnails: response.data,\r\n                    totalCount: response.headers[\"x-total-count\"],\r\n                    limit: LIMIT\r\n                });\r\n                \r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState(false);\r\n            });\r\n        }\r\n\r\n        getThumbnails();\r\n\r\n    }, [pageData.currentPage, props.match.params.page]) \r\n\r\n    // Return a table with some data from the API.\r\n    return  (\r\n        <div className=\"container\">\r\n            {\r\n                loading ? (\r\n                    <LoadingOverlay/>\r\n                ) : (\r\n                    thumbnailData.thumbnails.length > 0 ? (\r\n                        <div>\r\n                            <div className=\"row galleryGrid\">\r\n                                {\r\n                                    thumbnailData.thumbnails.map((value, index) => \r\n                                        <ThumbnailImage\r\n                                            id={value.id}\r\n                                            url={value.thumbnailUrl}\r\n                                            alt={value.id}\r\n                                            title={value.title}\r\n                                            key={index}\r\n                                        />)\r\n                                }                          \r\n                            </div>\r\n                            \r\n                            <PaginationBar \r\n                                currentPage={pageData.currentPage}\r\n                                totalPages={Math.ceil(thumbnailData.totalCount / LIMIT)}\r\n                                url='/gallery/'\r\n                            />\r\n                            \r\n                        </div>\r\n                    ) : (\r\n                        <FailureOverlay/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n            \r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport LoadingOverlay from './LoadingOverlay'\r\nimport FailureOverlay from './FailureOverlay'\r\nimport Image from 'react-graceful-image';\r\n\r\nexport default function ViewerContainer(props) {\r\n    const state = {\r\n        loading: true\r\n    }\r\n\r\n    const data = {\r\n        image: undefined\r\n    }\r\n\r\n    const [image, setImage] = useState(data)\r\n    const [loading, setLoadingState] = useState(state);\r\n\r\n    useEffect(() => {\r\n\r\n        const getImageData = async () => {  \r\n            await axios\r\n            .get(`https://jsonplaceholder.typicode.com/photos/${props.match.params.id}`,\r\n            {\r\n                mode: 'no-cors',\r\n                headers: {\r\n                  'Access-Control-Allow-Origin': '*',\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n                credentials: 'same-origin',\r\n              })\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setImage(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState(false);              \r\n            });\r\n\r\n        }\r\n\r\n        getImageData();\r\n    }, [props.match.params.id]) \r\n\r\n    // Return a table with some data from the API.\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                loading ? (\r\n                    <LoadingOverlay/>\r\n                ) : (\r\n                    image.id ?  (\r\n                    <div className=\"row\">\r\n                        <div className=\"column\">\r\n                            <Image className=\"imageView\" \r\n                                src={image.url} \r\n                                width='600' height='600' \r\n                                alt={image.id}\r\n                                placeholderColor='#393d3a'/>    \r\n                            \r\n                        </div>\r\n                        <div className=\"column description\">\r\n                            <div className=\"descriptionRow\"><div className=\"descriptionKey\">Image ID</div><div className=\"descriptionValue\"> {image.id}</div></div>\r\n                            <div className=\"descriptionRow\"><div className=\"descriptionKey\">Title</div><div className=\"descriptionValue\"> {image.title}</div></div>\r\n                            <div className=\"descriptionRow\"><div className=\"descriptionKey\">Album ID</div><div className=\"descriptionValue\"> {image.albumId}</div></div>             \r\n                        </div>\r\n                    </div>\r\n                    ) : (\r\n                        <FailureOverlay/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}","import React from 'react';\nimport { Route, Switch, Redirect, BrowserRouter, Link } from 'react-router-dom'\nimport GalleryContainer from './Components/GalleryContainer';\nimport ViewerContainer from './Components/ViewerContainer';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename=\"/futubrowser\">\n        <Link to='/' className=\"AppHeader\">\n          futuBrowser\n        </Link>\n      \n        <Switch>\n          <Route exact path=\"/gallery\" component={GalleryContainer} />\n          <Route path=\"/gallery/:page\" component={GalleryContainer}/>\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/gallery\" />)} />           \n          <Route path=\"/view/:id\" component={ViewerContainer}/>      \n          <Route path=\"*\" render={() => (<Redirect to=\"/gallery\" />)} />\n        </Switch>\n      </BrowserRouter>\n      \n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/Styles.scss';\nimport App from './App';\nimport { BrowserRouter as Router}  from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}